#!/bin/sh

ENABLE_shared=1
ENABLE_static=1

ENABLE_dmthin=
ENABLE_rbd=
ENABLE_zvol=

ENABLE_tests=

ENABLE_doc=

CONFIGURE_OPTS="$@"

# C defines:
cdefinevars='USE_READDIR_R READLINKAT_EMPTY_PATH'

help() {
  cat <<EOF
usage: ./configure [options]
options:
  --help             show this help message
  --prefix=DIR       installation prefix
  --bindir=DIR       binary dir (PREFIX/bin)
  --libdir=DIR       library dir (PREFIX/lib)
  --includedir=DIR   directory for include headers (PREFIX/include)
  --pkgconfdir=DIR   directory for .pc files (LIBDIR/pkgconfig)
  --datarootdir=DIR  data root directory (PREFIX/share)
  --mandir=DIR       manual page root directory (DATAROOTDIR/man)
  --man1dir=DIR      section 1 manual page directory (MANDIR/man1)

  --enable-shared   build a shared library
  --enable-static   build a static library

  --enable-doc      enable documentation

  --enable-dmthin   enable the dmthin backend
  --enable-rbd      enable the rbd backend
  --enable-zvol     enable the zvol backend

  --enable-tests    enable tests (default if a C++14 compiler is found)

environment variables:
  GLIB2_CFLAGS, GLIB2_LIBS
  DEVMAPPER_CFLAGS, DEVMAPPER_LIBS
  RADOS_CFLAGS, RADOS_LIBS
  RBD_CFLAGS, RBD_LIBS
  ZFS_CFLAGS, ZFS_LIBS
EOF
}

addopt() {
  case "$opt" in
    -h|--h|--help) help ; exit 0 ;;
    --prefix=*) PREFIX="${opt#--prefix=}" ;;
    --bindir=*) BINDIR="${opt#--bindir=}" ;;
    --libdir=*) LIBDIR="${opt#--libdir=}" ;;
    --includedir=*) INCLUDEDIR="${opt#--includedir=}" ;;
    --pkgconfigdir=*) PKGCONFIGDIR="${opt#--PKGCONFIGDIR=}" ;;
    --datarootdir=*) DATAROOTDIR="${opt#--datarootdir=}" ;;
    --mandir=*) MANDIR="${opt#--mandir=}" ;;
    --man1dir=*) MAN1DIR="${opt#--man1dir=}" ;;

    --enable-shared) ENABLE_shared='yes' ;;
    --disable-shared) ENABLE_shared='no' ;;
    --enable-shared=*) ENABLE_shared="${opt#--enable-shared=}" ;;

    --enable-static) ENABLE_static='yes' ;;
    --disable-static) ENABLE_static='no' ;;
    --enable-static=*) ENABLE_static="${opt#--enable-static=}" ;;

    --enable-dmthin) ENABLE_dmthin='yes' ;;
    --disable-dmthin) ENABLE_dmthin='no' ;;
    --enable-dmthin=*) ENABLE_dmthin="${opt#--enable-dmthin=}" ;;

    --enable-rbd) ENABLE_rbd='yes' ;;
    --disable-rbd) ENABLE_rbd='no' ;;
    --enable-rbd=*) ENABLE_rbd="${opt#--enable-rbd=}" ;;

    --enable-zvol) ENABLE_zvol='yes' ;;
    --disable-zvol) ENABLE_zvol='no' ;;
    --enable-zvol=*) ENABLE_zvol="${opt#--enable-zvol=}" ;;

    --enable-tests) ENABLE_tests='yes' ;;
    --disable-tests) ENABLE_tests='no' ;;
    --enable-tests=*) ENABLE_tests="${opt#--enable-tests=}" ;;

    --enable-doc) ENABLE_doc='yes' ;;
    --disable-doc) ENABLE_doc='no' ;;
    --enable-doc=*) ENABLE_doc="${opt#--enable-doc=}" ;;

    *)
      echo "unknown option: $opt"
      help
      exit 1
      ;;
  esac
}

. ./shlib.configure.sh

#
# begin ./configure
#

for opt; do
  addopt "$opt"
done

PREFIX="${PREFIX:-/usr/local}"
BINDIR="${BINDIR:-${PREFIX}/bin}"
LIBDIR="${LIBDIR:-${PREFIX}/lib}"
INCLUDEDIR="${INCLUDEDIR:-${PREFIX}/include}"
PKGCONFIGDIR="${PKGCONFIGDIR:-${LIBDIR}/pkgconfig}"
DATAROOTDIR="${DATAROOTDIR:-${PREFIX}/share}"
MANDIR="${MANDIR:-${DATAROOTDIR}/man}"
MAN1DIR="${MAN1DIR:-${MANDIR}/man1}"

substvars='PREFIX BINDIR LIBDIR INCLUDEDIR PKGCONFIGDIR'
substvars="$substvars DATAROOTDIR MANDIR MAN1DIR"

case "$OSNAME" in
  *Linux*)
    USE_READDIR_R="${USE_READDIR_R:-0}"
    echo "Using readdir() over readdir_r()."
    READLINKAT_EMPTY_PATH="${READLINKAT_EMPTY_PATH:-y}"
    echo "Assuming readlinkat() supports empty paths."
    ;;
  *)
    USE_READDIR_R="${USE_READDIR_R:-1}"
    echo "Using readdir_r() over readdir()."
    READLINKAT_EMPTY_PATH="${READLINKAT_EMPTY_PATH:-n}"
    echo "Assuming readlinkat() does not support empty paths."
    ;;
esac

# example:
#if [ "x$ENABLE_ZLIB" = "xyes" ]; then
#  checkfor zlib Z zlib
#fi

must checkprog 'c compiler' CC clang gcc cc
USING_CLANG=0
addvar USING_CLANG
case "$CC" in
  clang|*/clang)
    USING_CLANG=1
    ;;
  *) : ;;
esac

testcheck() {
  checkprog 'c++ compiler' CXX clang++ g++ c++ || return 1
}
CONFIG_TESTS=n
ifenabled ENABLE_tests testcheck && CONFIG_TESTS=y
confdef CONFIG_TESTS

doccheck() {
  checkprog 'rst2man' RST2MAN rst2man || return 1
}
ifenabled ENABLE_doc doccheck && CONFIG_DOC=y
confdef CONFIG_DOC

must checkprog libtool LIBTOOL libtool
LTFLAGS=''
addvar LTFLAGS

must checkfor glib-2.0 GLIB2 glib-2.0

CONFIG_DMTHIN=n
ifenabled ENABLE_dmthin checkfor devmapper DEVMAPPER devmapper \
  && CONFIG_DMTHIN=y
confdef CONFIG_DMTHIN

CONFIG_RBD=n
RADOS_LIBS="${RADOS_LIBS:--lrados}"
RBD_LIBS="${RBD_LIBS:--lrbd}"
checkrbd() {
  checkprog librados-config LIBRADOS_CONFIG librados-config || return 1
  echo -n 'Checking for librados and librbd...'
  trycc "$RADOS_CFLAGS $RBD_CFLAGS" "$RADOS_LIBS $RBD_LIBS" "
#include <stdio.h>
#include <stdint.h>
#include <rados/librados.h>
#include <rbd/librbd.h>
int main(int argc, char **argv) {
	int64_t pid;
	rados_t rd;
	char buffer[1024];
	size_t bufsz = sizeof(buffer);
	rados_ioctx_t ctx;
	rados_create(&rd, NULL);
	rados_conf_read_file(rd, NULL);
	rados_connect(rd);
	rados_pool_lookup(rd, argv[1]);
	rados_ioctx_create2(rd, pid, &ctx);
	rbd_list(ctx, buffer, &bufsz);
	rados_ioctx_destroy(ctx);
	rados_shutdown(rd);
	return 0;
}
" \
    || return 1
  echo OK
  addvar RADOS_CFLAGS RADOS_LIBS RBD_CFLAGS RBD_LIBS
}
ifenabled ENABLE_rbd checkrbd \
  && CONFIG_RBD=y
confdef CONFIG_RBD

CONFIG_ZVOL=n
ifenabled ENABLE_zvol checkfor libzfs ZFS libzfs \
  && CONFIG_ZVOL=y
confdef CONFIG_ZVOL

echo -n "Checking for major() and minor() macros..."
MAJOR_CODE="int main() { return major(3)+minor(3); }"
MAJOR_IN_MKDEV=n
MAJOR_IN_SYSMACROS=n
if ! trycc "" "" "$MAJOR_CODE" 'sys/types.h'; then
  if trycc "" "" "$MAJOR_CODE" 'sys/mkdev.h'; then
    MAJOR_IN_MKDEV=y
    echo " in <sys/mkdev.h>"
  elif trycc "" "" "$MAJOR_CODE" 'sys/sysmacros.h'; then
    MAJOR_IN_SYSMACROS=y
    echo " in <sys/sysmacros.h>"
  else
    die "not found"
  fi
else
  echo " in <sys/types.h>"
fi
confdef MAJOR_IN_MKDEV
confdef MAJOR_IN_SYSMACROS

ENDIAN_CODE='int main() {
  union { char c[4]; uint32_t u; } var = { .c = {0,1,2,3} };
  printf("%08x", var.u);
}'

echo -n 'Checking endianness... '
CONFIG_BIG_ENDIAN=n
if trycc '-std=c11' '' "$ENDIAN_CODE" 'stdio.h stdint.h' 'endian'; then
  if [ "$endian" = 00010203 ]; then
    CONFIG_BIG_ENDIAN=y
    echo wrong
  else
    echo right
  fi
else
  die failed
fi
confdef CONFIG_BIG_ENDIAN

addvar CONFIGURE_OPTS
substall
cdefineall
mak "CONF_CPPFLAGS := ${CONF_CPPFLAGS}"
mak '-include $(ROOTDIR)/local.mak'
mak "include ${srcdir}/common.mak"

cat <<EOF
Config:
  doc:          $ENABLE_doc
  tests:        $ENABLE_tests
Flags:
  fies-dmthin:  $ENABLE_dmthin
  fies-rbd:     $ENABLE_rbd
  fies-zvol:    $ENABLE_zvol
  testsuite:    $ENABLE_tests
EOF
